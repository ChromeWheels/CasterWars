using UnityEngine;
using System.Collections;
using System.Collections.Generic;

public class HighlightsController : MonoBehaviour {

	public static HighlightsController S = null;

	public GameObject highlightAttackPrefab = null; //!< The GameObject that is used for highlighting the available tiles that can be attacked
	public GameObject highlightCapturePrefab = null; //!< The GameObject that is used for highlighting the available tiles that can be captured
	public GameObject highlightMovePrefab = null; //!< The GameObject that is used for highlighting the available tiles that can be moved to
	public float highlightYPosition = -0.51f; //!< The vertical offset of the highlights

	private List<GameObject> highlightedTiles = null; //!< Temporary list of highlighted tiles

	#region /// @name Controller vars
	private MapsController mapsController = null; //!< The local reference to the maps controller
	private MovementController movementController = null; //!< The local reference to the movement's controller
	#endregion

	#region /// @name Unity methods
	/**
	 * Called when the script is loaded, before the game starts
	 */
	void Awake () {
		S = this;

		highlightedTiles = new List<GameObject> ();
	}

	/**
	 * Runs at load time
	 */
	void Start () {
		mapsController = MapsController.S;
		movementController = MovementController.S;
	}
	#endregion

	/**
	 * Loops through the Vector2 array of locations that is generated by getPossibleMoves and creates highlighted tiles
	 */
	public void highlightPossibleMoves () {
		// Initialize the new highlight for use in the loop
		GameObject newHighlight = null;

		// Get the highlight's collection object
		GameObject highlightsCollection = GameObject.Find ("Highlights");

		// Loop through the neighborring locations and create the highlights
		foreach (KeyValuePair<Vector2, HighlightActions> tile in movementController.moves) {
			// Create the new position
			Vector3 pos = new Vector3 (tile.Key.x, highlightYPosition, mapsController.invertY (tile.Key.y));

			// Instantiate the correct tile
			switch (tile.Value) {
			case HighlightActions.Attack:
				newHighlight = Instantiate (highlightAttackPrefab, pos, Quaternion.identity) as GameObject;
				break;
			case HighlightActions.Capture:
				newHighlight = Instantiate (highlightCapturePrefab, pos, Quaternion.identity) as GameObject;
				break;
			case HighlightActions.Move:
				newHighlight = Instantiate (highlightMovePrefab, pos, Quaternion.identity) as GameObject;
				break;
			}

			// Set the parent of the highlight
			newHighlight.transform.SetParent (highlightsCollection.transform);

			// Add the highlight to the collection array
			highlightedTiles.Add (newHighlight);
		}
	}

	/**
	 * Removes all currently highlighted tiles
	 */
	public void removeHighlights () {
		// Destroy all of the highlighted tiles
		foreach (GameObject tile in highlightedTiles) {
			Destroy (tile);
		}

		// Clear the array
		highlightedTiles.Clear ();
	}
}
